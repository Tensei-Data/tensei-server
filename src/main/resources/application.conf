# Application configuration.

# Include the tensei config first.
include "tensei.conf"

# Configure the akka system.
akka {
  extensions = [
    "akka.cluster.client.ClusterClientReceptionist"
  ]

  loggers                          = [akka.event.slf4j.Slf4jLogger]
  logging-filter                   = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel                         = info
  log-dead-letters                 = 0
  log-dead-letters-during-shutdown = off

  actor {
    provider = akka.cluster.ClusterActorRefProvider

    debug {
      lifecycle = off
      receive = off
      unhandled = on
    }
  }

  cluster {
    # Should the 'leader' in the cluster be allowed to automatically mark
    # unreachable nodes as DOWN after a configured time of unreachability?
    # Using auto-down implies that two separate clusters will automatically be
    # formed in case of network partition.
    # Disable with "off" or specify a duration to enable auto-down.
    auto-down-unreachable-after = off
    seed-nodes                  = [
      "akka.tcp://tensei-system@"${tensei.server.hostname}":"${tensei.server.port}
    ]
    roles = [server]

    client {
      # Settings for the ClusterReceptionistExtension
      receptionist {
        # Actor name of the ClusterReceptionist actor, /user/concierge
        name = concierge

        # Start the receptionist on members tagged with this role.
        # All members are used if undefined or empty.
        role = "server"

        # The receptionist will send this number of contact points to the client
        number-of-contacts = 3

        # The actor that tunnel response messages to the client will be stopped
        # after this time of inactivity.
        response-tunnel-receive-timeout = 30s
      }
    }
  }

  remote {
    enabled-transports          = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = off

    transport-failure-detector {
      # How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 4 seconds
      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # This margin is important to be able to survive sudden, occasional,
      # pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      acceptable-heartbeat-pause = 30 seconds
      # After the heartbeat request has been sent the first failure detection
      # will start after this period, even though no heartbeat mesage has
      # been received.
      expected-response-after = 15 s
    }

    netty.tcp {
      hostname = ${tensei.server.hostname}
      port     = ${tensei.server.port}

      # Sets the send buffer size of the Sockets,
      # set to 0b for platform default
      send-buffer-size = 2097152b

      # Sets the receive buffer size of the Sockets,
      # set to 0b for platform default
      receive-buffer-size = 2097152b

      # Maximum message size the transport will accept, but at least
      # 32000 bytes.
      # Please note that UDP does not support arbitrary large datagrams,
      # so this setting has to be chosen carefully when using UDP.
      # Both send-buffer-size and receive-buffer-size settings has to
      # be adjusted to be able to buffer messages of maximum size.
      maximum-frame-size = 1048576b
    }
  }
}
